@page "/contacts"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@using Contato.Data.Models
@using Contato.Data
@using Microsoft.EntityFrameworkCore
@inject ContactDBContext db
@inject IJSRuntime JSRuntime

<PageTitle>Contato</PageTitle>

<h1>Gerenciamento de Contatos</h1>


<div class="container mt-3">
    <div class="row justify-content-between">
        <div class="col-md-4">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Filtrar por DDD..." @bind="filtroDDD">
                <div class="input-group-append">
                    <button class="btn btn-outline-secondary" type="button" @onclick="AplicarFiltro">Filtrar</button>
                    <button class="btn btn-outline-danger" type="button" @onclick="LimparFiltro">Limpar Filtro</button>
                </div>
            </div>
        </div>
        <div class="col-md-auto">
            <button class="btn btn-primary mb-2" @onclick="() => OpenAddEditModal()">Adicionar Novo Contato</button>
        </div>
    </div>
</div>



 @if (contatos == null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nome</th>
                <th>DDD</th>
                <th>Telefone</th>
                <th>Email</th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var contato in contatos)
            {
                <tr>
                    <td>@contato.Nome</td>
                    <td>@contato.DDD</td>
                    <td>@contato.Telefone</td>
                    <td>@contato.Email</td>
                    <td>
                        <button class="btn btn-success" @onclick="() => OpenAddEditModal(contato)">Editar</button>
                        <button class="btn btn-danger" @onclick="() => ConfirmDelete(contato.Id)">Excluir</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    
}





@code {
    private List<Contact> contatos;
    private Contact currentContact = new Contact();
    private bool isEditMode;
    private string filtroDDD;

    protected override async Task OnInitializedAsync()
    {
        contatos = await db.Contacts.ToListAsync();
    }

    private async Task AplicarFiltro()
    {
        if (string.IsNullOrWhiteSpace(filtroDDD))
        {
            contatos = await db.Contacts.ToListAsync();
        }
        else
        {
            contatos = await db.Contacts
                              .Where(c => c.DDD == filtroDDD)
                              .ToListAsync();
        }
    }
    private async Task LimparFiltro()
    {
        filtroDDD = "";
        contatos = await db.Contacts.ToListAsync();
    }
    private async Task SaveContact()
    {
        if (isEditMode)
        {
            db.Contacts.Update(currentContact);
        }
        else
        {
            db.Contacts.Add(currentContact);
        }

        await db.SaveChangesAsync();
        await OnInitializedAsync(); // Reload the list
        await JSRuntime.InvokeVoidAsync("hideContactModal");
    }

    private async Task ConfirmDelete(int id)
    {
        var contato = await db.Contacts.FindAsync(id);
        if (contato != null)
        {
            db.Contacts.Remove(contato);
            await db.SaveChangesAsync();
            await OnInitializedAsync(); // Reload the list
            Console.WriteLine($"cliquei no delete");
        }
    }
    private string modalTitle = "Adicionar Novo Contato";

    public void OpenAddEditModal(Contact contato = null)
    {
        currentContact = contato ?? new Contact();
        isEditMode = contato != null;
        modalTitle = isEditMode ? "Editar Contato" : "Adicionar Novo Contato";
        JSRuntime.InvokeVoidAsync("console.log (passei pelo edit");
        Console.WriteLine($"Modal Title: {modalTitle}");
        StateHasChanged();
       JSRuntime.InvokeVoidAsync("showContactModal");
    }

}


@code {
    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
        Console.WriteLine("executei o increment Count");
    }

}


<div class="modal" id="contactModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@modalTitle</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="currentContact" OnValidSubmit="SaveContact" FormName="ContactForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label for="name">Nome:</label>
                        <InputText id="name" class="form-control" @bind-Value="currentContact.Nome" />
                    </div>
                    <div class="form-group">
                        <label for="ddd">DDD:</label>
                        <InputText id="ddd" class="form-control" @bind-Value="currentContact.DDD" />
                    </div>
                    <div class="form-group">
                        <label for="phone">Telefone:</label>
                        <InputText id="phone" class="form-control" @bind-Value="currentContact.Telefone" />
                    </div>
                    <div class="form-group">
                        <label for="email">Email:</label>
                        <InputText id="email" class="form-control" @bind-Value="currentContact.Email" />
                    </div>

                    <button type="submit" class="btn btn-success">Salvar</button>
                </EditForm>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Fechar</button>
            </div>
        </div>
    </div>
</div>